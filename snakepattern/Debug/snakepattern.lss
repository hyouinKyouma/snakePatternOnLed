
snakepattern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000038b  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000103  00000000  00000000  000005bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000203  00000000  00000000  000006be  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  000008c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000017c  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000014e  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  00000bb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
    const char length=4;
	const int d=500;
	DDRA=DDRB=DDRC=DDRD=0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	81 bb       	out	0x11, r24	; 17
  70:	84 bb       	out	0x14, r24	; 20
  72:	87 bb       	out	0x17, r24	; 23
  74:	8a bb       	out	0x1a, r24	; 26
	PORTA=PORTB=PORTC=PORTD=0x00;
  76:	12 ba       	out	0x12, r1	; 18
  78:	15 ba       	out	0x15, r1	; 21
  7a:	18 ba       	out	0x18, r1	; 24
  7c:	1b ba       	out	0x1b, r1	; 27
  7e:	84 e0       	ldi	r24, 0x04	; 4
	for(char i=0;i<length;i++)
	{
		PORTA=(PORTA<<1) +0x01;
  80:	9b b3       	in	r25, 0x1b	; 27
  82:	99 0f       	add	r25, r25
  84:	9f 5f       	subi	r25, 0xFF	; 255
  86:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	2f e9       	ldi	r18, 0x9F	; 159
  8a:	36 e8       	ldi	r19, 0x86	; 134
  8c:	91 e0       	ldi	r25, 0x01	; 1
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	30 40       	sbci	r19, 0x00	; 0
  92:	90 40       	sbci	r25, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <main+0x22>
  96:	00 c0       	rjmp	.+0      	; 0x98 <main+0x2c>
  98:	00 00       	nop
  9a:	81 50       	subi	r24, 0x01	; 1
{
    const char length=4;
	const int d=500;
	DDRA=DDRB=DDRC=DDRD=0xff;
	PORTA=PORTB=PORTC=PORTD=0x00;
	for(char i=0;i<length;i++)
  9c:	89 f7       	brne	.-30     	; 0x80 <main+0x14>
		PORTA=(PORTA<<1) +0x01;
		_delay_ms(d);
	}
	for (char i=0;i<8-length;i++)
	{
		PORTA=PORTA<<1;
  9e:	9b b3       	in	r25, 0x1b	; 27
  a0:	99 0f       	add	r25, r25
  a2:	9b bb       	out	0x1b, r25	; 27
  a4:	2f e9       	ldi	r18, 0x9F	; 159
  a6:	36 e8       	ldi	r19, 0x86	; 134
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	30 40       	sbci	r19, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x3e>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x48>
  b4:	00 00       	nop
	for(char i=0;i<length;i++)
	{
		PORTA=(PORTA<<1) +0x01;
		_delay_ms(d);
	}
	for (char i=0;i<8-length;i++)
  b6:	8f 5f       	subi	r24, 0xFF	; 255
  b8:	84 30       	cpi	r24, 0x04	; 4
  ba:	89 f7       	brne	.-30     	; 0x9e <main+0x32>
		PORTA=PORTA<<1;
		_delay_ms(d);
	}
	for(char i=0;i<length;i++)
	{
		PORTA=PORTA<<1;
  bc:	9b b3       	in	r25, 0x1b	; 27
  be:	99 0f       	add	r25, r25
  c0:	9b bb       	out	0x1b, r25	; 27
		PORTB=(PORTB>>1) +0x80;
  c2:	98 b3       	in	r25, 0x18	; 24
  c4:	96 95       	lsr	r25
  c6:	90 58       	subi	r25, 0x80	; 128
  c8:	98 bb       	out	0x18, r25	; 24
  ca:	2f e9       	ldi	r18, 0x9F	; 159
  cc:	36 e8       	ldi	r19, 0x86	; 134
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	30 40       	sbci	r19, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x64>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x6e>
  da:	00 00       	nop
  dc:	81 50       	subi	r24, 0x01	; 1
	for (char i=0;i<8-length;i++)
	{
		PORTA=PORTA<<1;
		_delay_ms(d);
	}
	for(char i=0;i<length;i++)
  de:	71 f7       	brne	.-36     	; 0xbc <main+0x50>
		PORTB=(PORTB>>1) +0x80;
		_delay_ms(d);
	}
	for (char i=0;i<8-length;i++)
	{
		PORTB=PORTB>>1;
  e0:	98 b3       	in	r25, 0x18	; 24
  e2:	96 95       	lsr	r25
  e4:	98 bb       	out	0x18, r25	; 24
  e6:	2f e9       	ldi	r18, 0x9F	; 159
  e8:	36 e8       	ldi	r19, 0x86	; 134
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	30 40       	sbci	r19, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x80>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x8a>
  f6:	00 00       	nop
	{
		PORTA=PORTA<<1;
		PORTB=(PORTB>>1) +0x80;
		_delay_ms(d);
	}
	for (char i=0;i<8-length;i++)
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	84 30       	cpi	r24, 0x04	; 4
  fc:	89 f7       	brne	.-30     	; 0xe0 <main+0x74>
		PORTB=PORTB>>1;
		_delay_ms(d);
	}
	for(char i=0;i<length;i++)
	{
		PORTB=PORTB>>1;
  fe:	98 b3       	in	r25, 0x18	; 24
 100:	96 95       	lsr	r25
 102:	98 bb       	out	0x18, r25	; 24
		PORTC=(PORTC<<1) +0x01;
 104:	95 b3       	in	r25, 0x15	; 21
 106:	99 0f       	add	r25, r25
 108:	9f 5f       	subi	r25, 0xFF	; 255
 10a:	95 bb       	out	0x15, r25	; 21
 10c:	2f e9       	ldi	r18, 0x9F	; 159
 10e:	36 e8       	ldi	r19, 0x86	; 134
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	21 50       	subi	r18, 0x01	; 1
 114:	30 40       	sbci	r19, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0xa6>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0xb0>
 11c:	00 00       	nop
 11e:	81 50       	subi	r24, 0x01	; 1
	for (char i=0;i<8-length;i++)
	{
		PORTB=PORTB>>1;
		_delay_ms(d);
	}
	for(char i=0;i<length;i++)
 120:	71 f7       	brne	.-36     	; 0xfe <main+0x92>
		PORTC=(PORTC<<1) +0x01;
		_delay_ms(d);
	}
	for (char i=0;i<8-length;i++)
	{
		PORTC=PORTC<<1;
 122:	95 b3       	in	r25, 0x15	; 21
 124:	99 0f       	add	r25, r25
 126:	95 bb       	out	0x15, r25	; 21
 128:	2f e9       	ldi	r18, 0x9F	; 159
 12a:	36 e8       	ldi	r19, 0x86	; 134
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	30 40       	sbci	r19, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0xc2>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0xcc>
 138:	00 00       	nop
	{
		PORTB=PORTB>>1;
		PORTC=(PORTC<<1) +0x01;
		_delay_ms(d);
	}
	for (char i=0;i<8-length;i++)
 13a:	8f 5f       	subi	r24, 0xFF	; 255
 13c:	84 30       	cpi	r24, 0x04	; 4
 13e:	89 f7       	brne	.-30     	; 0x122 <main+0xb6>
		PORTC=PORTC<<1;
		_delay_ms(d);
	}
	for(char i=0;i<length;i++)
	{
		PORTC=PORTC<<1;
 140:	95 b3       	in	r25, 0x15	; 21
 142:	99 0f       	add	r25, r25
 144:	95 bb       	out	0x15, r25	; 21
		PORTD=(PORTD>>1) +0x80;
 146:	92 b3       	in	r25, 0x12	; 18
 148:	96 95       	lsr	r25
 14a:	90 58       	subi	r25, 0x80	; 128
 14c:	92 bb       	out	0x12, r25	; 18
 14e:	2f e9       	ldi	r18, 0x9F	; 159
 150:	36 e8       	ldi	r19, 0x86	; 134
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	21 50       	subi	r18, 0x01	; 1
 156:	30 40       	sbci	r19, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <main+0xe8>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0xf2>
 15e:	00 00       	nop
 160:	81 50       	subi	r24, 0x01	; 1
	for (char i=0;i<8-length;i++)
	{
		PORTC=PORTC<<1;
		_delay_ms(d);
	}
	for(char i=0;i<length;i++)
 162:	71 f7       	brne	.-36     	; 0x140 <main+0xd4>
 164:	88 e0       	ldi	r24, 0x08	; 8
		PORTD=(PORTD>>1) +0x80;
		_delay_ms(d);
	}
	for (char i=0;i<8;i++)
	{
		PORTD=PORTD>>1;
 166:	92 b3       	in	r25, 0x12	; 18
 168:	96 95       	lsr	r25
 16a:	92 bb       	out	0x12, r25	; 18
 16c:	2f e9       	ldi	r18, 0x9F	; 159
 16e:	36 e8       	ldi	r19, 0x86	; 134
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	21 50       	subi	r18, 0x01	; 1
 174:	30 40       	sbci	r19, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <main+0x106>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0x110>
 17c:	00 00       	nop
 17e:	81 50       	subi	r24, 0x01	; 1
	{
		PORTC=PORTC<<1;
		PORTD=(PORTD>>1) +0x80;
		_delay_ms(d);
	}
	for (char i=0;i<8;i++)
 180:	91 f7       	brne	.-28     	; 0x166 <main+0xfa>
	{
		PORTD=PORTD>>1;
		_delay_ms(d);
	}
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	08 95       	ret

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
